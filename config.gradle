ext {


    dependencies = [
            //*********************官方依赖***********************//
            //v7依赖,
            "core-ktx:1.2.0"            : "androidx.core:core-ktx:1.2.0",
            "appcompat:1.1.0"           : "androidx.appcompat:appcompat:1.1.0",
            "constraintlayout:1.1.3"    : "androidx.constraintlayout:constraintlayout:1.1.3",
            "lifecycle-extensions:2.2.0": "androidx.lifecycle:lifecycle-extensions:2.2.0",
            //新版的兼容包依赖方式
            "androidx-appcompat"        : "androidx.appcompat:appcompat:1.0.0-beta01",
            //导航
            "navigation-fragment"       : "android.arch.navigation:navigation-fragment:1.0.0-alpha05",

            //*********************第三方依赖***********************//
            //超级工具类
            "utilcode"                  : "com.blankj:utilcode:1.19.0",

            //Android util,
            "blankj_utilcode"           : "com.blankj:utilcode:1.29.0",
            // if u use AndroidX, use the following
            "blankj_utilcodex"          : "com.blankj:utilcodex:1.29.0",

            //arouter
            "arouter-api"               : 'com.alibaba:arouter-api:1.5.0',


    ]
    annotationProcessor = [
            "butterknife-compiler": "com.jakewharton:butterknife-compiler:8.8.1",
            "glide:compiler:4.5.0": "com.github.bumptech.glide:compiler:4.5.0",
            "glide:compiler:4.8.0": "com.github.bumptech.glide:compiler:4.8.0",
            //arouter
            "arouter-compiler"    : 'com.alibaba:arouter-compiler:1.0.6'
    ]

    androidConfig = [
            appName          : 'lilei',
            compileSdkVersion: 29,
            buildToolsVersion: "29.0.3",
            applicationId    : "com.lilei.on_the_way",
            minSdkVersion    : 20,
            targetSdkVersion : 27,
            versionCode      : 1_018_001,
            versionName      : '1.18.1',// E.g 1.9.72 => 1,009,072
    ]

    versionConfig = [
            // plugin
            gradle     : '3.1.3',
            kotlin     : '1.2.30',
            // lib
            support    : '27.1.0',
            gson       : '2.8.2',
            glide      : '4.7.1',
            leakcanary : '1.5.4',
            // test
            junit      : '4.12',
            robolectric: '3.1.2'
    ]

    depConfig = [
            gradle              : "com.android.tools.build:gradle:$versionConfig.gradle",
            kotlin_gradle_plugin: "org.jetbrains.kotlin:kotlin-gradle-plugin:$versionConfig.kotlin",

            support             : [
                    appcompat_v7: "com.android.support:appcompat-v7:$versionConfig.support",
                    design      : "com.android.support:design:$versionConfig.support",
            ],
            kotlin_stdlib_jdk7  : "org.jetbrains.kotlin:kotlin-stdlib-jdk7",
            leakcanary          : [
                    android      : "com.squareup.leakcanary:leakcanary-android:$versionConfig.leakcanary",
                    android_no_op: "com.squareup.leakcanary:leakcanary-android-no-op:$versionConfig.leakcanary",
            ],
            gson                : "com.google.code.gson:gson:$versionConfig.gson",
            glide               : "com.github.bumptech.glide:glide:$versionConfig.glide",

            junit               : "junit:junit:$versionConfig.junit",
            robolectric         : "org.robolectric:robolectric:$versionConfig.robolectric",
    ]

    configAndroidDomain = this.&configAndroidDomain
    configAppDependencies = this.&configAppDependencies
    configApply = this.&configApply

}
//application插件
def configApply(Project pro) {
    pro.apply plugin: 'com.android.application'
    pro.apply plugin: 'kotlin-android'
    pro.apply plugin: 'kotlin-android-extensions'
}

def configAndroidDomain(Project pro) {
    if (pro.plugins.hasPlugin("com.android.application")) {
        configAppAndroidDomain(pro)
    } else {
        configLibAndroidDomain(pro)
    }
}

def configAppDependencies(Project pro) {
    pro.dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'androidx.test.ext:junit:1.1.1'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
        implementation rootProject.ext.dependencies["appcompat:1.1.0"]
        implementation rootProject.ext.dependencies["core-ktx:1.2.0"]
        implementation rootProject.ext.dependencies["constraintlayout:1.1.3"]
        addComponent 'dome_a'
        addComponent 'dome_b'
        implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    }
}


def configAppAndroidDomain(Project pro) {
    configField(pro)
    configSigning(pro)
    pro.android {
        compileSdkVersion androidConfig.compileSdkVersion
        defaultConfig {
            applicationId androidConfig.applicationId
            minSdkVersion androidConfig.minSdkVersion
            targetSdkVersion androidConfig.targetSdkVersion
            versionCode androidConfig.versionCode
            versionName androidConfig.versionName
            multiDexEnabled true
            javaCompileOptions {
                annotationProcessorOptions {
                    arguments = [AROUTER_MODULE_NAME: project.getName()]
                }
            }
        }

        buildTypes {
            release {
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
        //配置资源路径
        configSourceSets(pro.android)

        lintOptions {
            abortOnError false
        }
        dataBinding {
            enabled = true
        }
    }
}
/**
 * 配置资源路径
 * @param android
 * @return
 */
def configSourceSets(android) {
    android.sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/layout',
                    'src/main/res/layout/view',
                    'src/main/res/layout/adapter',
                    'src/main/res/layout/include',
                    'src/main/res/layout/other'
            ]
            jniLibs.srcDirs = ['libs']

        }
    }
}

def configField(Project pro) {
    pro.android.defaultConfig {
        resValue "string", "app_name", androidConfig.appName
    }
}

def configSigning(Project pro) {
    File signPropertiesFile = file('sign/keystore.properties')
    if (!signPropertiesFile.exists()) return
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
}

def configLibAndroidDomain(Project pro) {
    pro.android {
        compileSdkVersion androidConfig.compileSdkVersion
        defaultConfig {
            minSdkVersion androidConfig.minSdkVersion
            versionCode androidConfig.versionCode
            versionName androidConfig.versionName
        }

        buildTypes {
            release {
                minifyEnabled false
//            consumerProguardFiles 'proguard-rules.pro'
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
        configSourceSets(pro.android)
        lintOptions {
            abortOnError false
        }
        dataBinding {
            enabled = true
        }
        testOptions.unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
}




